from kivymd.app import MDApp
from kivymd.uix.button import MDIconButton
from kivy.core.window import Window
from kivy.lang import Builder
from kivymd.uix.dialog import MDDialog
import random
from kivy.uix.screenmanager import ScreenManager, Screen
from kivymd.uix.list import OneLineIconListItem, IconLeftWidget
Window.size = (300, 500)

screen_helper = """
<MenuScreen>:
    name : 'menu'
    MDTextField:
        id: username
        hint_text: "Digit in password"
        pos_hint:{'center_x': 0.5, 'center_y': 0.78}
        size_hint_x: 0.83
        size_hint_y:None
        height:120   
             
    MDTextField:
        id: acc_name
        hint_text: "Account Name"
        pos_hint:{'center_x': 0.5, 'center_y': 0.68}
        size_hint_x: 0.83
        size_hint_y:None
        height:120    
        
    MDRaisedButton:
        text: "Generate"
        font_size: 20
        pos_hint:{'center_x': 0.5, 'center_y': 0.525}
        size_hint:(0.83, 0.15)
        on_press: root.show_data()
    
    MDTextField:
        id: decode
        hint_text: "Message"
        pos_hint:{'center_x': 0.5, 'center_y': 0.30}
        size_hint_x: 0.83
        size_hint_y:None
        height:120
            
    MDRectangleFlatButton:
        text: "Decode"
        font_size: 20
        pos_hint:{'center_x': 0.5, 'center_y': 0.15}
        size_hint:(0.83, 0.15)
        on_press: root.decode_data()
            
    BoxLayout:
        orientation: 'vertical'
        MDToolbar:
            title: 'Password Manager'
            right_action_items: [["key-variant", lambda x: root.show_pass()]]
            elevation:10
        Widget:
        
        
<StackScreen>:    
    name : 'stack'
    MDTextField:
        id: login_pass
        hint_text: "Enter the Password"
        helper_text_mode: "on_focus"
        icon_right_color: app.theme_cls.primary_color
        pos_hint:{'center_x': 0.5, 'center_y': 0.63}
        size_hint_x: 0.83
        size_hint_y:None
        height:120
    
    MDTextField:
        id: login_user
        hint_text: "Enter the username"
        helper_text_mode: "on_focus"
        icon_right_color: app.theme_cls.primary_color
        pos_hint:{'center_x': 0.5, 'center_y': 0.73}
        size_hint_x: 0.83
        size_hint_y:None
        height:120
        
    MDFillRoundFlatButton:
        text: "Login"
        font_size: 30
        pos_hint:{'center_x': 0.5, 'center_y': 0.25}
        size_hint:(0.83, 0.35)
        on_press: root.login_cred()
        
    BoxLayout:
        orientation: 'vertical'
        MDToolbar:
            title: 'Password Manager'
            elevation:10
        Widget:
        
        
<PassScreen>:
    name : 'pass_scr'
    BoxLayout:
        id: mybox
        MDCard:
            ScrollView:
                MDList:
                    id: container

        MDRaisedButton: 
            text: "Back"
            on_press: root.manager.current = "menu"


        







    

Screen:        
    NavigationLayout:
        ScreenManager:
            StackScreen:
            MenuScreen:
            PassScreen:
                            
                    
"""
password = ""

class MenuScreen(Screen):
    def show_data(self):
        btn_yes = MDIconButton(icon="check", on_release=self.save_pass)
        btn_no = MDIconButton(icon="close", on_press=self.close_dialog)
        btn_agn = MDIconButton(icon="replay", on_press=self.close_dialog, on_release=self.show_data2)
        username = self.ids.username
        alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*/?\|+_-='
        pass_len = int(username.text)
        global password
        password = "".join(random.sample(alphabet, pass_len))
        self.dialog = MDDialog(title='Do you want to keep this Password?',
                               text=password, size_hint=(0.8, 1),
                               buttons=[btn_yes, btn_no, btn_agn])
        self.dialog.open()

    def show_data2(self, obj):
        btn_yes = MDIconButton(icon="check", on_release=self.save_pass)
        btn_no = MDIconButton(icon="close", on_press=self.close_dialog)
        btn_agn = MDIconButton(icon="replay", on_press=self.close_dialog, on_release=self.show_data2)
        username = self.ids.username
        alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*/?\|+_-='
        pass_len = int(username.text)
        global password
        password = "".join(random.sample(alphabet, pass_len))
        self.dialog = MDDialog(title='Do you want to keep this Password?',
                               text=password, size_hint=(0.8, 1),
                               buttons=[btn_yes, btn_no, btn_agn])
        self.dialog.open()

    def navigation_draw(self):
        pass

    def close_dialog(self, obj):
        self.dialog.dismiss()

    def close_dialog2(self, obj):
        self.dialog2.dismiss()

    def save_pass(self, obj):
        acc_name = self.ids.acc_name
        alphabet1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmonpqrstuvwxyz1234567890!@#$%^&*/?\|+_-= .,:;"
        message = (password)
        encrypt = ''
        for i in message:
            position = alphabet1.find(i)
            newposition = (position + 5) % 83
            encrypt += alphabet1[newposition]
        f = open("Passwords.txt", "a")
        v = (f"{acc_name.text} : {encrypt}\n")
        f.write(v)
        f.close()
        self.dialog.dismiss()

    def decode_data(self):
        alphabet2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmonpqrstuvwxyz1234567890!@#$%^&*/?\|+_-= .,:;"
        decode_data = self.ids.decode
        message = str(decode_data.text)
        decrypt = ''
        for i in message:
            pos = alphabet2.find(i)
            newpos = (pos - 5) % 83
            decrypt += alphabet2[newpos]
        btn_no1 = MDIconButton(icon="close", on_press=self.close_dialog2)
        self.dialog2 = MDDialog(title='Your decoded message',
                                text=decrypt, size_hint=(0.8, 1),
                                buttons=[btn_no1])
        self.dialog2.open()

    def show_pass(self):
        self.manager.transition.direction = 'left'
        self.manager.current = 'pass_scr'

class StackScreen(Screen):
    def login_cred(self):
        password2 = self.ids.login_pass
        pass3 = str(password2.text)
        if pass3 == '2':
            self.manager.current = 'menu'
        else:
            btn_no1 = MDIconButton(icon="close", on_press=self.close_dialog3)
            self.dialog_3 = MDDialog(title='Password Check',
                                    text="Invalid Password", size_hint=(0.8, 1),
                                    buttons=[btn_no1])
            self.dialog_3.open()

    def close_dialog3(self, obj):
        self.dialog_3.dismiss()

class PassScreen(Screen):
    def back_to_menuscr(self):
        self.manager.transition.direction = 'right'
        self.manager.current = 'menu'
    def on_enter(self):
        f = open("Passwords.txt", "r")
        content = f.readlines()
        f.close()
        for i in content:
            icon = IconLeftWidget(icon="key-variant")
            item = OneLineIconListItem(text=i)
            item.add_widget(icon)
            self.ids.container.add_widget(item)

    def on_leave(self):
        self.ids.container.clear_widgets()




sm = ScreenManager()
sm.add_widget(MenuScreen(name='menu'))
sm.add_widget(StackScreen(name='stack'))
sm.add_widget(StackScreen(name='pass_scr'))

class Password_manager(MDApp):
    def build(self):
        self.theme_cls.primary_palette = "Teal"
        self.theme_cls.primary_hue = "700"
        self.theme_cls.theme_style = 'Light'
        screen = Builder.load_string(screen_helper)

        return screen



Password_manager().run()
